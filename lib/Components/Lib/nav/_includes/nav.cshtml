---
home-menu: true
menu:
root-page:
upper-case: false
filter:
---
@using RazorLight
@using System
@using System.Linq
@using System.Collections.Generic
@using Xarial.Docify.Lib.Tools
@using Xarial.Docify.Base.Context
@inherits TemplatePage<Xarial.Docify.Base.Context.IContextModel>
@{
    const string MENU_OPT = "menu";
    const string HOME_MENU_OPT = "home-menu";

    var menu = NavigationMenuHelper.BuildPredefinedMenu(MENU_OPT, Model.Site, Model.Data)?.ToList();

    if (menu == null)
    {
        var rootPage = NavigationMenuHelper.GetRootPage(Model);

        menu = rootPage.SubPages
            .Where(p => !p.Data.ContainsKey("sitemap") || p.Data.GetOrDefault<bool>("sitemap")).ToList();

        if (Model.Data.GetOrDefault<bool>(HOME_MENU_OPT))
        {
            menu.Insert(0, NavigationMenuHelper.BuildPage(rootPage, "Home"));
        }
    }

    string GetMenuTitle(IContextPage page)
    {
        var caption = PageHelper.GetCaption(page, Model.Data);

        if (Model.Data.GetOrDefault<bool>("upper-case"))
        {
            caption = caption.ToUpper();
        }

        if (page.SubPages.Any())
        {
            caption += "▾";
        }

        return caption;
    }

    string RenderMenu(IEnumerable<IContextPage> pages, out bool hasActive)
    {
        pages = NavigationMenuHelper.FilterChildrenPages(pages, Model.Data.Get<string[]>("filter"));

        var html = new System.Text.StringBuilder();

        hasActive = false;

        foreach (var menuPage in pages)
        {
            var pageUrl = Model.Page.Url;
            var menuPageUrl = menuPage.Url;
            var isActive = false;

            bool hasActiveSubMenu;
            var menuHtml = RenderMenu(menuPage.SubPages, out hasActiveSubMenu);

            if (!string.IsNullOrEmpty(pageUrl) && !string.IsNullOrEmpty(menuPageUrl))
            {
                isActive = pageUrl.StartsWith(menuPageUrl, StringComparison.CurrentCultureIgnoreCase);

                if (menuPage is Xarial.Docify.Lib.Tools.MenuPage)
                {
                    var filter = (menuPage as Xarial.Docify.Lib.Tools.MenuPage).Scope;
                    if (filter != null && !string.IsNullOrEmpty(menuPage.Url))
                    {
                        var urlLoc = new UrlLocation(pageUrl);
                        isActive &= Xarial.Docify.Base.LocationExtension.Matches(urlLoc, filter);
                    }
                }
            };

            isActive |= hasActiveSubMenu;

            hasActive |= isActive;

            var activeClassName = isActive ? "active" : "not-active";
            html.AppendLine($"<li class=\"menu-item {activeClassName}\">");

            var href = !string.IsNullOrEmpty(menuPageUrl) ? $" href=\"{menuPageUrl}\"" : "";
            html.AppendLine($"<a{href}>{GetMenuTitle(menuPage)}</a>");

            if (menuPage.SubPages.Any())
            {
                html.AppendLine("<ul class=\"sub-menu-item-container\">");
                html.AppendLine(@menuHtml);
                html.AppendLine("</ul>");
            }
            html.AppendLine("</li>");
        }

        return html.ToString();
    }
}

<ul class="menu sub-menu-item-container" id="top-menu">
    <a class="menu-icon" onclick="OpenMenu(this)">
        <div class="bar1"></div>
        <div class="bar2"></div>
        <div class="bar3"></div>
    </a>
    @Raw(RenderMenu(menu, out _))
</ul>
