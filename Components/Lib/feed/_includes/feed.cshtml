---
image:
title_attribute: title
---
@using RazorLight
@using System
@using System.Linq
@using System.Collections.Generic
@using Xarial.Docify.Lib.Tools
@inherits TemplatePage<Xarial.Docify.Core.Compiler.Context.IncludeContextModel>
@{
    var img = Model.Site.MainPage.Data.GetOrDefault<string>("image");
    if (!string.IsNullOrEmpty(img))
    {
        img = Model.Site.BaseUrl + img;
    }

    var pages = PageHelper.GetAllPages(Model.Site.MainPage).Where(p => !p.Data.ContainsKey("sitemap") || p.Data.Get<bool>("sitemap"));
}
<title>@PageHelper.GetTitle(Model.Site.MainPage, Model.Data)</title>
<description>@(Model.Site.MainPage.Data.GetOrDefault<string>("description"))</description>
@Raw($"<link>{Model.Site.BaseUrl}</link>")
@if (!string.IsNullOrEmpty(img))
{
    <image>
        <url>@img </url>
        <title>@PageHelper.GetTitle(Model.Site.MainPage, Model.Data)</title>
        @Raw($"<link>{Model.Site.BaseUrl}</link>")
    </image>
}
<lastBuildDate>@DateTime.UtcNow.ToString("r")</lastBuildDate>
<atom:link href="@Model.Site.BaseUrl/feed.xml" rel="self" type="application/rss+xml" />
@foreach (var page in pages)
{
    <item>
        <title>@PageHelper.GetTitle(page, Model.Data)</title>
        <description>@(page.Data.GetOrDefault<string>("description"))</description>
        @Raw($"<link>{page.FullUrl}</link>")
        <guid isPermaLink="true">@(page.FullUrl)</guid>
        @{
            var categories = page.Data.GetOrDefault<IEnumerable<dynamic>>("categories");
            if (categories == null)
            {
                categories = Enumerable.Empty<dynamic>();
            }
        }
        @foreach (var category in categories)
        {
            <category>@category</category>
        }
    </item>
}
