---
path:
tabs:
regions:
excl-regions:
hide-regions: false
left-align: false
lang:
---
@using RazorLight
@using System
@using System.Linq
@using System.Collections.Generic
@using Xarial.Docify.Lib.Tools
@using System.Runtime.Serialization
@inherits TemplatePage<Xarial.Docify.Base.Context.IIncludeContextModel>
@functions{
    public class CodeSnippetData
    {
        public string FileName { get; set; }
        public Dictionary<string, string> Tabs { get; set; }
        public string[] Regions { get; set; }
        public string[] ExclRegions { get; set; }
        public bool HideRegions { get; set; }
        public bool LeftAlign { get; set; }
        public string Lang { get; set; }
    }
}
@{
    var data = DataDeserializer.Deserialize<CodeSnippetData>(Model.Data);

    var snipAsset = Model.Page.Assets.FirstOrDefault(a => string.Equals(
        a.Name, data.FileName, StringComparison.CurrentCultureIgnoreCase));

    @*if (snipAsset is ContextTextAsset)
    {
        var rawCode = ((ContextTextAsset)snipAsset).Content;

        var snips = CodeSnippetHelper.Select(rawCode, data.Lang, new CodeSelectorOptions()
        {
            ExcludeRegions = data.ExclRegions,
            HideRegions = data.HideRegions,
            LeftAlign = data.LeftAlign,
            Regions = data.Regions
        });

        foreach (var snip in snips) 
        {
            var md = await MarkdownHelper.ToHtml($"~~~{data.Lang}\r\n{snip}\r\n~~~");
            @Raw(md)
        }
    }
    else
    {
        throw new InvalidCastException($"Failed to find a text asset at '{data.FileName}'");
    }*@
}