---
title_attribute: caption
home_menu: true
menu:
---
@using RazorLight
@using System
@using System.Linq
@using System.Collections.Generic
@using Xarial.Docify.Core.Compiler.Context
@using Xarial.Docify.Lib.Tools
@inherits TemplatePage<Xarial.Docify.Core.Compiler.Context.IncludeContextModel>
@{
    const string MENU_OPT = "menu";
    const string HOME_MENU_OPT = "home_menu";
    const string PAGE_DISABLED_ATT = "disabled";
    const string PAGE_EXCLUDE_ATT = "toc";
    const string PAGE_ORDER_ATT = "order";

    var menu = NavigationMenuHelper.BuildPredefinedMenu(MENU_OPT, Model.Site, Model.Data)?.ToList();

    IContextPage homePage = null;

    if (menu == null)
    {
        menu = NavigationMenuHelper.GetRootPage(Model).SubPages.ToList();

        if (Model.Data.GetOrDefault<bool>(HOME_MENU_OPT))
        {
            homePage = NavigationMenuHelper.BuildPage(Model.Site.MainPage, Model.Data, "Home");
        }
    }

    int idCounter = 0;

    bool IsActive(IContextPage page)
    {
        return string.Equals(page.Url, Model.Page?.Url, StringComparison.CurrentCultureIgnoreCase);
    }

    string GetActiveAttribute(IContextPage page)
    {
        return IsActive(page) ? " active" : "";
    }

    string RenderToc(IEnumerable<IContextPage> pages, out bool hasActive, string parentId = "")
    {
        var html = new System.Text.StringBuilder();

        hasActive = false;

        foreach (var menuPage in pages.OrderBy(p=>
        {
            int order = -1;
            if (p.Data.TryGet<int>(PAGE_ORDER_ATT, out order))
            {
                return order;
            }
            else 
            {
                return int.MaxValue;
            }
        }))
        {
            bool includeToc = false;
            if (menuPage.Data.TryGet<bool>(PAGE_EXCLUDE_ATT, out includeToc))
            {
                if (!includeToc)
                {
                    continue;
                }
            }

            var entryId = "";

            if (menuPage.SubPages.Any())
            {
                entryId = $"n{++idCounter}";
            }

            html.AppendLine("<li>");

            var onClick = menuPage.SubPages.Any() ? $"onclick=\"javascript:toggle({entryId}Span, {entryId});\"" : "";
            html.AppendLine($"<div class=\"tree-toc-node pointer\" {onClick}>");

            if (menuPage.SubPages.Any())
            {
                html.AppendLine($"<span class=\"expbutton\" id=\"{entryId}Span\">&#9656;</span>");
            }

            var pageType = menuPage.SubPages.Any() ? "section" : "article";
            html.AppendLine($"<span class=\"{pageType}\"></span>");
            var title = PageHelper.GetTitle(menuPage, Model.Data);

            if (!menuPage.Data.GetOrDefault<bool>(PAGE_DISABLED_ATT))
            {
                html.AppendLine($"<a href=\"{menuPage.Url}\" class=\"toc-entry{GetActiveAttribute(menuPage)}\">{title}</a>");
            }
            else
            {
                html.AppendLine($"<span class=\"unavailable\">{title}</span>");
            }
            html.AppendLine("</li>");

            var isActive = IsActive(menuPage);

            if (isActive)
            {
                hasActive = true;
            }

            if (menuPage.SubPages.Any())
            {
                var hasChildActive = false;

                var toc = RenderToc(menuPage.SubPages, out hasChildActive, entryId);
                var exp = hasChildActive || isActive ? " in" : "";

                if (hasChildActive)
                {
                    hasActive = true;
                }

                html.AppendLine($"<ul id=\"{entryId}\" class=\"toc-container collapse {exp}\">");
                html.AppendLine(toc);
                html.AppendLine("</ul>");
            }
        }

        return html.ToString();
    }
}
<div id="toc">
    @if (homePage != null)
    {
        <a href="@homePage.Url" class="toc-entry @GetActiveAttribute(homePage)">Welcome</a>
    }
    <ul style="margin: 0px" class="toc-container collapse in">
        @Raw(RenderToc(menu, out bool _))
    </ul>
</div>
